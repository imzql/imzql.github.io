<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小赵同学</title>
  
  
  <link href="https://moe.vin/atom.xml" rel="self"/>
  
  <link href="https://moe.vin/"/>
  <updated>2022-12-12T11:40:39.539Z</updated>
  <id>https://moe.vin/</id>
  
  <author>
    <name>小赵同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>新机装npm报错解决方法</title>
    <link href="https://moe.vin/p/undefined.html"/>
    <id>https://moe.vin/p/undefined.html</id>
    <published>2022-07-19T00:57:12.000Z</published>
    <updated>2022-12-12T11:40:39.539Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>以管理员身份打开windos Powershell 并键入以下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Unrestricted <span class="literal">-Scope</span> CurrentUser <span class="literal">-Force</span></span><br><span class="line"></span><br><span class="line">npm install <span class="literal">--global</span> <span class="literal">--production</span> npm<span class="literal">-windows-upgrade</span></span><br><span class="line"></span><br><span class="line">npm<span class="literal">-windows-upgrade</span> <span class="literal">--npm-version</span> latest</span><br></pre></td></tr></table></figure><p>使用淘宝镜像 cnpm</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install cnpm <span class="literal">-g</span></span><br><span class="line"></span><br><span class="line">npm install cnpm <span class="literal">-g</span> <span class="literal">--registry</span>=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>解决了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h3&gt;&lt;p&gt;以管理员身份打开windos Powershell 并键入以下命令&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记录一下Linux常用的screen工具命令</title>
    <link href="https://moe.vin/p/f5bf8885.html"/>
    <id>https://moe.vin/p/f5bf8885.html</id>
    <published>2022-03-10T09:08:27.000Z</published>
    <updated>2022-12-12T11:40:39.638Z</updated>
    
    <content type="html"><![CDATA[<p>我们用 <code>VPS</code> 执行一个系统安装，就输入命令然后在那一直等。如果出现掉线或者断网死机的情况，我们还得重新安装。如果能使用上 <code>screen</code> 命令可以实现无人值守的效果。我们可以同时操作多个任务，也可以关机操作。所以说很方便。</p><h4 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h4><h5 id="1、安装方法："><a href="#1、安装方法：" class="headerlink" title="1、安装方法："></a><strong>1、安装方法：</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install screen  #CentOS</span><br><span class="line">apt-get install screen  #Debian或者Ubuntu</span><br></pre></td></tr></table></figure><h5 id="2、创建一个-screen-会话："><a href="#2、创建一个-screen-会话：" class="headerlink" title="2、创建一个 screen 会话："></a><strong>2、创建一个 screen 会话：</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S xx  #xx为创建会话的名称</span><br></pre></td></tr></table></figure><h5 id="3、隐藏并保留当前会话窗口："><a href="#3、隐藏并保留当前会话窗口：" class="headerlink" title="3、隐藏并保留当前会话窗口："></a><strong>3、隐藏并保留当前会话窗口：</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">按Ctrl+A，再按&quot;D&quot;键</span><br></pre></td></tr></table></figure><p>如果怕中途掉线或者要离开的话，可以使用。</p><h5 id="4、恢复会话窗口："><a href="#4、恢复会话窗口：" class="headerlink" title="4、恢复会话窗口："></a><strong>4、恢复会话窗口：</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r xx #恢复名字为xx的会话</span><br></pre></td></tr></table></figure><p>如果在恢复会话的时候忘记了或者没有设定会话名称我们就要执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -ls</span><br></pre></td></tr></table></figure><p>他会列出你所有的会话列表，然后使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r 会话名称</span><br></pre></td></tr></table></figure><p>来恢复会话窗口。</p><h5 id="5、关闭会话窗口："><a href="#5、关闭会话窗口：" class="headerlink" title="5、关闭会话窗口："></a><strong>5、关闭会话窗口：</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p><code>screen</code> 的好处就是不会因为远程的操作因网络问题中断掉。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们用 &lt;code&gt;VPS&lt;/code&gt; 执行一个系统安装，就输入命令然后在那一直等。如果出现掉线或者断网死机的情况，我们还得重新安装。如果能使用上 &lt;code&gt;screen&lt;/code&gt; 命令可以实现无人值守的效果。我们可以同时操作多个任务，也可以关机操作。所以说很方便。</summary>
      
    
    
    
    <category term="screen指令" scheme="https://moe.vin/categories/screen%E6%8C%87%E4%BB%A4/"/>
    
    
    <category term="screen" scheme="https://moe.vin/tags/screen/"/>
    
  </entry>
  
  <entry>
    <title>记录一下部署hellohao图床的坑</title>
    <link href="https://moe.vin/p/3d4fc856.html"/>
    <id>https://moe.vin/p/3d4fc856.html</id>
    <published>2022-03-08T07:47:22.000Z</published>
    <updated>2022-12-12T11:40:39.618Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>考虑到图片存储问题，还是不建议图片存在一些市面上免费的图床</p><p>所以打算搭建一款自己的图床，用于图片的存储，在朋友的了解到，才知道hellohao这个程序很不错</p><p>于是自己入手了hellohao的core版本，也就是付费版本</p><p>因为这个程序属于java开发的web程序，前后端分离，主要是后端提供图片存储服务</p><p>也就是可以把前端，后端，分别部署在两个服务器，这样可以有效的防止前端页面被不法分子攻击</p><p>导致自己的图床程序进入黑洞，这里我讲一下我作为一个新手小白如何搭建Java的这款程序的</p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>由于我自己使用的是debian系统，然后搭配的是宝塔程序</p><p>因为自己对一些linux的命令不太了解，所以一些命令可以基于宝塔面板搭建会比较方便快捷</p><h5 id="安装好Debian"><a href="#安装好Debian" class="headerlink" title="安装好Debian"></a>安装好Debian</h5><p>因为我的服务器在腾讯云，腾讯云已经给了系统镜像</p><h5 id="安装好宝塔面板"><a href="#安装好宝塔面板" class="headerlink" title="安装好宝塔面板"></a>安装好宝塔面板</h5><p>这里访问bt.cn然后copy对应的脚本安装指令即可</p><h5 id="配置java变量"><a href="#配置java变量" class="headerlink" title="配置java变量"></a>配置java变量</h5><h6 id="下载jdk1-8"><a href="#下载jdk1-8" class="headerlink" title="下载jdk1.8"></a>下载jdk1.8</h6><p>这里我已经上传到我的百度网盘，直接下载下来就好了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1A1W7Ty91_cDA2YRoluV_bg?pwd=qb9q </span><br><span class="line">提取码：qb9q</span><br></pre></td></tr></table></figure><p>我们直接进入宝塔面板的文件根目录，然后找到以下地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/java</span><br></pre></td></tr></table></figure><p>如果没有java文件夹请新建一个即可，然后将下载好的jdk文件使用宝塔自带的方法进行解压</p><p>解压好我的jdk文件夹的地址是这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/java/jdk1.8.0_181</span><br></pre></td></tr></table></figure><h6 id="配置java环境变量"><a href="#配置java环境变量" class="headerlink" title="配置java环境变量"></a>配置java环境变量</h6><p>直接切换到该目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/lighthouse</span><br></pre></td></tr></table></figure><p>如果没有请新建，然后找到.bashrc文件，然后打开编辑，在文件的最后一行加入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_181</span><br><span class="line">       export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">       export PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin</span><br></pre></td></tr></table></figure><p>这里我们需要刷新一下系统的java环境变量，我们链接好ssh到服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /home/lighthouse/.bashrc</span><br></pre></td></tr></table></figure><p>然后再输入环境是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>输入以上代码即可，然后就可以按照官方的安装文档配置了</p><p>记住这里如果系统返回nofound是指你的环境还没安装好，重新检查一下是那步有问题，再检查一下就好了！</p><p>官方的配置文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://doc.wwery.com/#/internalversion</span><br></pre></td></tr></table></figure><h5 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;考虑到图片存储问题，还是不建议图片存在一些市面上免费的图床&lt;/p&gt;
&lt;p&gt;所以打算搭建一款自己的图床，用于图片的存储，在朋友的了解到，才知道</summary>
      
    
    
    
    <category term="部署hellohao图床" scheme="https://moe.vin/categories/%E9%83%A8%E7%BD%B2hellohao%E5%9B%BE%E5%BA%8A/"/>
    
    
    <category term="hellohao图床" scheme="https://moe.vin/tags/hellohao%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>hexo推送报错解决方法</title>
    <link href="https://moe.vin/p/3dfe0e1e.html"/>
    <id>https://moe.vin/p/3dfe0e1e.html</id>
    <published>2022-03-05T03:22:02.000Z</published>
    <updated>2022-12-12T11:40:39.789Z</updated>
    
    <content type="html"><![CDATA[<p>好久不更新hexo博客，今天发现一个问题，发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>将新的hexo文章部署到github pages会提示错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/a956551943/a956551943.github.io/&#x27;: Encountered end of file</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (/usr/local/src/hexo/hanyubolg/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:376:20)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><p>经过仔细搜索方法，这个问题得以解决</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><h5 id="首先，在node-js的官网重新下载node-js，然后等待安装完成"><a href="#首先，在node-js的官网重新下载node-js，然后等待安装完成" class="headerlink" title="首先，在node.js的官网重新下载node.js，然后等待安装完成"></a>首先，在node.js的官网重新下载node.js，然后等待安装完成</h5><h5 id="进入自己的hexo-blog的文件夹，然后git-bush-here"><a href="#进入自己的hexo-blog的文件夹，然后git-bush-here" class="headerlink" title="进入自己的hexo blog的文件夹，然后git bush here"></a>进入自己的hexo blog的文件夹，然后git bush here</h5><p>输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##删除git提交内容文件夹</span><br><span class="line">rm -rf .deploy_git/</span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##执行</span><br><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure><p>最后将文章推送到github即可，发现还是蛮简单就可以解决的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久不更新hexo博客，今天发现一个问题，发现&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的python笔记</title>
    <link href="https://moe.vin/p/13aa859c.html"/>
    <id>https://moe.vin/p/13aa859c.html</id>
    <published>2022-03-05T02:49:48.000Z</published>
    <updated>2022-12-12T11:40:39.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python笔记总结"><a href="#python笔记总结" class="headerlink" title="python笔记总结"></a>python笔记总结</h2><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>and or not</p><p>相对比c语言，语法有一些不同，&amp;&amp;(且)，||(或)，!(非)；</p><p>逻辑运算符语法</p><p>and 一假则假，指的是两个需要bool值为true才返回true</p><p>or  一真则真，指的是任意一个条件，bool值为true，就返回true</p><p>not 遇真则假，遇假则真，遇到true返回false，遇到false返回true</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;python笔记总结&quot;&gt;&lt;a href=&quot;#python笔记总结&quot; class=&quot;headerlink&quot; title=&quot;python笔记总结&quot;&gt;&lt;/a&gt;python笔记总结&lt;/h2&gt;&lt;h4 id=&quot;逻辑运算符&quot;&gt;&lt;a href=&quot;#逻辑运算符&quot; class=&quot;he</summary>
      
    
    
    
    <category term="python笔记" scheme="https://moe.vin/categories/python%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="python笔记" scheme="https://moe.vin/tags/python%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>记录一下Linux安装x-ui和bbr加速</title>
    <link href="https://moe.vin/p/acd7a6a9.html"/>
    <id>https://moe.vin/p/acd7a6a9.html</id>
    <published>2022-02-04T10:27:00.000Z</published>
    <updated>2022-12-12T11:40:39.704Z</updated>
    
    <content type="html"><![CDATA[<p>由于centos系统过于老旧，又不知道之前下载了什么插件</p><p>索性给自己的机器进行了一次系统重装，升级为centos7.0</p><p>写这篇笔记记录一下纯净的centos系统安装bbr和x-ui面板</p><h3 id="安装centos依赖"><a href="#安装centos依赖" class="headerlink" title="安装centos依赖"></a>安装centos依赖</h3><h4 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><p>由于我们主要是安装x-ui不需要安装什么插件啥的</p><h3 id="安装x-ui面板"><a href="#安装x-ui面板" class="headerlink" title="安装x-ui面板"></a>安装x-ui面板</h3><h4 id="安装一键脚本"><a href="#安装一键脚本" class="headerlink" title="安装一键脚本"></a>安装一键脚本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</span><br></pre></td></tr></table></figure><p>准备尝试docker安装，但是比较繁琐，暂时不折腾了</p><h4 id="登陆x-ui面板"><a href="#登陆x-ui面板" class="headerlink" title="登陆x-ui面板"></a>登陆x-ui面板</h4><p>因为x-ui默认是54321端口，直接使用ip+端口54321进行访问</p><h3 id="安装bbr加速"><a href="#安装bbr加速" class="headerlink" title="安装bbr加速"></a>安装bbr加速</h3><p>使用以下的一键脚本进行安装bbr即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://gist.github.com/zeruns/a0ec603f20d1b86de6a774a8ba27588f/raw/4f9957ae23f5efb2bb7c57a198ae2cffebfb1c56/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><p>首先安装bbr内核和bbr内核魔改版</p><p>然后启用bbr内核的魔改版即可</p><h3 id="安装防火墙"><a href="#安装防火墙" class="headerlink" title="安装防火墙"></a>安装防火墙</h3><p>如果不记得指令，可以使用这个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=14530/tcp --permanent</span><br></pre></td></tr></table></figure><p>到时候Linux系统会提示没有安装防火墙，根据提示安装防火墙</p><p>安装完成后需要给x-ui面板开放54321端口</p><p>直接执行以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=54321/tcp --permanent</span><br></pre></td></tr></table></figure><p>然后x-ui面板开启了之后需要开放对应端口直接对以上代码进行端口数值修改即可</p><p>防火墙开启但是不会立即生效，需要使用以下命令进行对防火墙端口修改立即生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>ok，搞定了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于centos系统过于老旧，又不知道之前下载了什么插件&lt;/p&gt;
&lt;p&gt;索性给自己的机器进行了一次系统重装，升级为centos7.0&lt;/p&gt;
&lt;p&gt;写这篇笔记记录一下纯净的centos系统安装bbr和x-ui面板&lt;/p&gt;
&lt;h3 id=&quot;安装centos依赖&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="x-ui面板安装" scheme="https://moe.vin/categories/x-ui%E9%9D%A2%E6%9D%BF%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="x-ui" scheme="https://moe.vin/tags/x-ui/"/>
    
  </entry>
  
  <entry>
    <title>记录一些常用的docker命令与项目</title>
    <link href="https://moe.vin/p/27ad136a.html"/>
    <id>https://moe.vin/p/27ad136a.html</id>
    <published>2022-01-26T14:20:51.000Z</published>
    <updated>2022-12-12T11:40:39.671Z</updated>
    
    <content type="html"><![CDATA[<p>最近喜欢上了docker部署，但是有些命令去文档看</p><p>官网老慢了，一些常用的指令记录下来，用来备忘</p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><h4 id="一键查看正在运行容器"><a href="#一键查看正在运行容器" class="headerlink" title="一键查看正在运行容器"></a>一键查看正在运行容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h4 id="设置容器执行服务器开启自启"><a href="#设置容器执行服务器开启自启" class="headerlink" title="设置容器执行服务器开启自启"></a>设置容器执行服务器开启自启</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker update 容器的id --restart=always</span><br></pre></td></tr></table></figure><h3 id="优秀的docker项目"><a href="#优秀的docker项目" class="headerlink" title="优秀的docker项目"></a>优秀的docker项目</h3><h4 id="rsshub"><a href="#rsshub" class="headerlink" title="rsshub"></a>rsshub</h4><h5 id="首先拉取镜像"><a href="#首先拉取镜像" class="headerlink" title="首先拉取镜像"></a>首先拉取镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull diygod/rsshub</span><br></pre></td></tr></table></figure><h5 id="部署应用，这里部署在公网ip的1200端口，需要提前开启防火墙"><a href="#部署应用，这里部署在公网ip的1200端口，需要提前开启防火墙" class="headerlink" title="部署应用，这里部署在公网ip的1200端口，需要提前开启防火墙"></a>部署应用，这里部署在公网ip的1200端口，需要提前开启防火墙</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name rsshub -p 1200:1200 diygod/rsshub</span><br></pre></td></tr></table></figure><h5 id="进行宝塔的域名反代，即可"><a href="#进行宝塔的域名反代，即可" class="headerlink" title="进行宝塔的域名反代，即可"></a>进行宝塔的域名反代，即可</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近喜欢上了docker部署，但是有些命令去文档看&lt;/p&gt;
&lt;p&gt;官网老慢了，一些常用的指令记录下来，用来备忘&lt;/p&gt;
&lt;h3 id=&quot;常用指令&quot;&gt;&lt;a href=&quot;#常用指令&quot; class=&quot;headerlink&quot; title=&quot;常用指令&quot;&gt;&lt;/a&gt;常用指令&lt;/h3&gt;&lt;h</summary>
      
    
    
    
    <category term="docker" scheme="https://moe.vin/categories/docker/"/>
    
    
    <category term="docker" scheme="https://moe.vin/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>hexo解决图片本地化的问题</title>
    <link href="https://moe.vin/p/49292a36.html"/>
    <id>https://moe.vin/p/49292a36.html</id>
    <published>2022-01-23T15:18:55.000Z</published>
    <updated>2022-12-12T11:40:39.781Z</updated>
    
    <content type="html"><![CDATA[<p>仔细看了很多hexo的博客，基本上都是纯文字的博客</p><p>长篇大论的文字，会产生一定的视觉疲劳</p><p>写文章要图文并茂，这样自己看也舒服，读者也舒服</p><p>typroa是一个可以沉浸式写作的好用的软件，软件本身也自带了很多功能</p><p>市面上也有很多速度很快的图床，但是数据放在别人那里，总还是感觉不太靠谱</p><p>我在想，有没有一种方法，可以使自己的hexo文章的图片本地化呢</p><p>下午找了很久，问了很多大佬，简单记录一下实现的思路</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>去自己本地的博客文件夹git bash 一下，安装上传插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><p>再修改一下自己的hexo博客的配置文件_config.yml，加入下面的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure><p>在自己的hexo博客的文件夹里的source”下新建”imags”文件夹</p><p>在这里，需要注意”imags”与”_posts”同级，否则会出错</p><p>在Typora中“文件-&gt;设置偏好-&gt;图像“。在插入图片时”复制到指定路径“设置为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../source/images//$&#123;filename&#125;</span><br></pre></td></tr></table></figure><p>可以参考一下下面的图片</p><p><img src="/../images/hexo%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E6%9C%AC%E5%9C%B0%E5%8C%96%E7%9A%84%E9%97%AE%E9%A2%98/1.png" alt="1"></p><p>在typroa的菜单里面找到格式</p><p>在”格式-&gt;图像-&gt;设置图片根目录“将”你的hexo博客文件夹-&gt;source”设置为根目录</p><p>这样就实现了图片本地化，即使换电脑，也可以备份迁移了</p><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>顺便提醒一下我遇到的问题，有时候图片会显示上传失败，大概率是图片的文件名过长</p><p>建议把图片的文件名重命名为数字再上传，可以解决这个问题</p><p class="note note-success">感谢您的阅读</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;仔细看了很多hexo的博客，基本上都是纯文字的博客&lt;/p&gt;
&lt;p&gt;长篇大论的文字，会产生一定的视觉疲劳&lt;/p&gt;
&lt;p&gt;写文章要图文并茂，这样自己看也舒服，读者也舒服&lt;/p&gt;
&lt;p&gt;typroa是一个可以沉浸式写作的好用的软件，软件本身也自带了很多功能&lt;/p&gt;
&lt;p&gt;市面上也</summary>
      
    
    
    
    <category term="思路" scheme="https://moe.vin/categories/%E6%80%9D%E8%B7%AF/"/>
    
    
    <category term="图片本地" scheme="https://moe.vin/tags/%E5%9B%BE%E7%89%87%E6%9C%AC%E5%9C%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo的备份以及数据恢复</title>
    <link href="https://moe.vin/p/1dbfa096.html"/>
    <id>https://moe.vin/p/1dbfa096.html</id>
    <published>2022-01-23T06:16:34.000Z</published>
    <updated>2022-12-12T11:40:39.855Z</updated>
    
    <content type="html"><![CDATA[<p>为了防止误操作或计算机崩溃导致的博客源文件丢失</p><p>或满足我们更换电脑进行写作的需求，定期进行备份与恢复就显得很重要了</p><h3 id="开始备份"><a href="#开始备份" class="headerlink" title="开始备份"></a>开始备份</h3><p>我们在进行备份时，并不需要将整个博客目录全部备份，只备份以下几个用户自定义的即可</p><p>scaffolds目录，source目录，themes目录，.gitignore文件，_config.yml文件，package.json文件</p><p>其他都是通用的</p><p>首先我们先来观察整个博客目录的结构：</p><p>(1) .deploy_git 本目录会在我们部署时生成，也就是github上保存的文件，无需备份。</p><p>(2) node_modules 本目录包含了hexo博客依赖的模块，安装时自动生成，无需备份。</p><p>(3) public 与.deploy_git类似，是编译后生成的文件静态网页文件，无需备份。</p><p>(4) scaffolds 保存了用户文章的模板，需要备份。</p><p>(5) source 保存了用户文章的源文件，需要备份。</p><p>(6) themes 保存了用户下载的主题文件与配置，需要备份。</p><p>(7) .gitignore 保存了推送到github时忽略的文件名，需要备份。</p><p>(8) _config.yml 保存了用户配置信息，需要备份。</p><p>(9) db.json 保存了网页的数据文件，在编译生成静态网页时会自动更新，无需备份。</p><p>(10) package.json 保存了依赖的模块列表，需要备份。</p><p>(11) package-lock.json 保存了依赖的模块安装记录，无需备份。</p><h3 id="备份操作"><a href="#备份操作" class="headerlink" title="备份操作"></a>备份操作</h3><p>在了解了需要备份的文件后，就可以进行备份了</p><p>可以手动找到这些文件并将其拷贝出来，或者上传到云端</p><p>例如比较好用的托管平台github，码云，阿里云盘</p><h3 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h3><p>如果电脑上已经安装了hexo博客，由于某些误操作只是想恢复到之前备份的状态的话</p><p>只需要将备份的那六个文件和目录覆盖当前博客相应的文件和目录即可</p><p>如果已经换到新电脑，可以进行如下操作</p><h3 id="安装git-bash和node-js"><a href="#安装git-bash和node-js" class="headerlink" title="安装git bash和node.js"></a>安装git bash和node.js</h3><p>安装后可以在cmd中输入<code>git version</code>，<code>node -v</code>，<code>npm -v</code>查看版本来检测是否成功安装</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在cmd中输入<code>npm install -g hexo-cli</code></p><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p>在想要保存hexo目录的位置，右键打开git bash here</p><p>执行<code>hexo init</code></p><h3 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h3><p>将备份的六个文件和目录覆盖到当前博客目录，恢复操作完成，可以<code>hexo g</code>，<code>hexo s</code>进行检验</p><p>是不是非常简单</p><h3 id="一键指令"><a href="#一键指令" class="headerlink" title="一键指令"></a>一键指令</h3><p>一键本地预览</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo c &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>一键部署到github pages</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo c &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>感谢您的阅读</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为了防止误操作或计算机崩溃导致的博客源文件丢失&lt;/p&gt;
&lt;p&gt;或满足我们更换电脑进行写作的需求，定期进行备份与恢复就显得很重要了&lt;/p&gt;
&lt;h3 id=&quot;开始备份&quot;&gt;&lt;a href=&quot;#开始备份&quot; class=&quot;headerlink&quot; title=&quot;开始备份&quot;&gt;&lt;/a&gt;开始</summary>
      
    
    
    
    <category term="备份" scheme="https://moe.vin/categories/%E5%A4%87%E4%BB%BD/"/>
    
    
    <category term="数据备份" scheme="https://moe.vin/tags/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>我的c语言学习笔记</title>
    <link href="https://moe.vin/p/306f1f3b.html"/>
    <id>https://moe.vin/p/306f1f3b.html</id>
    <published>2022-01-22T10:39:10.000Z</published>
    <updated>2022-12-12T11:40:39.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门阶段-认识C语言"><a href="#入门阶段-认识C语言" class="headerlink" title="入门阶段 认识C语言"></a>入门阶段 认识C语言</h1><h2 id="1-进制的转换"><a href="#1-进制的转换" class="headerlink" title="1.进制的转换"></a>1.进制的转换</h2><p>十进制：有 0 - 9 共十个数字，逢十进一</p><p>二进制：有 0 - 1 共两个数字，逢二进一</p><p>八进制：有 0 - 7 共八个数字，逢八进一</p><p>十六进制：有 0 - 9 ，A(10),B(11),C(12),D(13),E(14),F(15),共十六个数字，逢十六进一</p><h2 id="2-进制的脚标"><a href="#2-进制的脚标" class="headerlink" title="2.进制的脚标"></a>2.进制的脚标</h2><p>二进制：B    八进制：Q    十进制：D   十六进制：H</p><p>数字标法</p><p>(101)<sub>2</sub>         </p><p>(72)<sub>8</sub></p><p>(398)<sub>10</sub>  </p><p>(123)<sub>16</sub></p><h2 id="3-按权展开式"><a href="#3-按权展开式" class="headerlink" title="3.按权展开式"></a>3.按权展开式</h2><p>非十进制转为十进制</p><p>方法：</p><p>1.确定权</p><p>2.标指数</p><p>十进制转换为非十进制</p><p>方法:</p><p>取余倒排序</p><p>其中需要记忆的是取余法则</p><p>1&#x2F;2&#x3D;0…..1(小&#x2F;大&#x3D;0…..小）</p><p>例如：7&#x2F;8&#x3D;0…..7</p><h2 id="4-字符在计算机内部的表示"><a href="#4-字符在计算机内部的表示" class="headerlink" title="4.字符在计算机内部的表示"></a>4.字符在计算机内部的表示</h2><p><strong>此部分比较重要，需要考选择题和填空题</strong></p><p>ASCII码：美国信息交换标准码，采用七位二进制进行编码</p><p>0000000B-1111111B</p><p>0-127 共128个编码</p><p>A-Z：65-90</p><p>a-z：97-122</p><p>0-9:48-57</p><p>空格(space）：32</p><h1 id="第一章-程序设计的基本概念"><a href="#第一章-程序设计的基本概念" class="headerlink" title="第一章 程序设计的基本概念"></a>第一章 程序设计的基本概念</h1><h2 id="1-1-程序"><a href="#1-1-程序" class="headerlink" title="1.1 程序"></a>1.1 程序</h2><p>由高级语言编写的程序成为源程序</p><p>由c语言编写的程序扩展为“.c”</p><p>编译后生成“.obj”，链接后生成“.exe”</p><p>c语言源程序的执行过程为编译和链接</p><p>例如：源程序（A.c）通过编译变成目标程序（A.obj）通过链接变成可执行文件（A.exe）</p><h2 id="1-2-结构化程序设计"><a href="#1-2-结构化程序设计" class="headerlink" title="1.2 结构化程序设计"></a>1.2 结构化程序设计</h2><p>主要需要了解三个结构</p><p>1.顺序结构  2.选择结构  3.循环结构</p><p>说明:c语言属于结构化程序设计</p><h1 id="第二章-c程序设计的初步知识"><a href="#第二章-c程序设计的初步知识" class="headerlink" title="第二章 c程序设计的初步知识"></a>第二章 c程序设计的初步知识</h1><p>函数头部</p><pre><code>main()       int  a,b,s;      a=123;b=456;      s=a+b; printf(&quot;&lt;s=%d\n&gt;&quot;,s);  这是输出函数</code></pre><p>说明：printf(“&lt;格式化字符串&gt;”,”&lt;参量表&gt;”)</p><p>原则是正常字符，原样输出</p><p>格式化规定字符：以%开始，用来确定输出的内容格式</p><p><strong>C程序的特点</strong></p><p><strong>1.一个c程序由函数组成，函数是组成c程序的基本单位，语句是组成c程序的最小单位</strong></p><p><strong>2.一个c程序总是由主函数开始执行</strong></p><p><strong>3.一行可写一条或多条语句，一条语句也可以写成一行或多行</strong></p><p><strong>4.每条语句最后加分号结束</strong></p><h2 id="2-1-标识符、常量、变量"><a href="#2-1-标识符、常量、变量" class="headerlink" title="2.1 标识符、常量、变量"></a>2.1 标识符、常量、变量</h2><h4 id="1-标识符"><a href="#1-标识符" class="headerlink" title="1.标识符"></a>1.标识符</h4><p>由数字、字母、下划线组成</p><p>开头必须是字母或下划线</p><p>注意：</p><p>1.关键字不能用于用户标志符</p><p>2.C语言中是区分大小写的</p><p>说明：</p><p>1.c语言的关键字不能用于标识</p><p>2.c语言的关键字均为小写字母</p><p>3.标识符是区分大小写</p><h4 id="2-常量"><a href="#2-常量" class="headerlink" title="2.常量"></a>2.常量</h4><p>在程序运行过程中其值不可改变的量</p><p>整型：123，-456</p><p>实型：0.123，-4.56 （其中实型单指小数）</p><p>字符型：’A’ , ‘f’ （字符型的字母必须由单引号引起来）</p><h4 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h4><p>在程序运行中其值可以变的量</p><p>整型 int  a，b，s；    其中变量名由标识符组成</p><p>实型 float  x，y；</p><p>int  sum  ； 则变量sum值为随机值</p><p>未赋值的变量默认为随机值</p><p><strong>在c语言中，最简单的数据类型包括整型，实型，字符型。</strong></p><h2 id="2-3-整型数据"><a href="#2-3-整型数据" class="headerlink" title="2.3 整型数据"></a><strong>2.3 整型数据</strong></h2><h4 id="1-整型常量"><a href="#1-整型常量" class="headerlink" title="1.整型常量"></a>1.整型常量</h4><p>（C语言的整型常量无二进制）</p><p>十进制：123，-456</p><p>八进制：024,072（前导0）</p><p>十六进制：0x123,0xabc（前导0x或者0X）注意：可以大小写x</p><h5 id="知识点速记"><a href="#知识点速记" class="headerlink" title="知识点速记"></a>知识点速记</h5><p><strong>1.其中，为原型，需要保留输出，否则不得分，回车可以写也可以不写</strong></p><p><strong>2.其中，%0以八进制数形式输出整数，%x以十六进制数形式输出</strong></p><p><strong>3.以八进制，十六进制输出一定是没有前导的</strong></p><h4 id="2-整型变量"><a href="#2-整型变量" class="headerlink" title="2.整型变量"></a>2.整型变量</h4><p>int 基本型（TC系统占2个字节，VC系统占4个字节）</p><p>short  短整型   占2个字节</p><p>long   长整型   占4个字节</p><p>unsigned  无符号型  只用了解即可</p><h2 id="2-4-实型数据"><a href="#2-4-实型数据" class="headerlink" title="2.4 实型数据"></a><strong>2.4 实型数据</strong></h2><h4 id="1-实型常量"><a href="#1-实型常量" class="headerlink" title="1.实型常量"></a>1.实型常量</h4><h5 id="1-小数点式"><a href="#1-小数点式" class="headerlink" title="1.小数点式"></a>1.小数点式</h5><p>由数字，正负号，小数点组成</p><p>组成规则：</p><p>1.必须要有小数点</p><p>2.至少一边要有数字（小数点一边没有数字的）</p><hr><h5 id="2-指数形式（由E或e组成）"><a href="#2-指数形式（由E或e组成）" class="headerlink" title="2.指数形式（由E或e组成）"></a>2.指数形式（由E或e组成）</h5><p>举例子</p><p>组成规则：</p><p>1.两边都要有数字（确切的说e的两边）</p><p>2.指数部分必须是整数</p><hr><h4 id="2-实型变量"><a href="#2-实型变量" class="headerlink" title="2.实型变量"></a>2.实型变量</h4><p>单精度：float   4个字节</p><p>双精度：double  8个字节</p><p><strong>补充知识点：看到%f，结果输出必须要保留6位小数</strong></p><p>习题：</p><p>设char w；int x；float y；double z；</p><p>则表达式w*x+z-y的值的类型是（double）</p><p>解析：char w属于字符型；1字节</p><p>intx  属于整型，2字节</p><p>float y属于实型变量单精度，4字节</p><p>double z属于实型变量双精度，8字节</p><p>注意四种不同类型的变量，进行运算，最后的结果应该以最长字节为准。故填最长字节double</p><p>这里的做题技巧就是只要在填空题看到“表达式”“类型”直接写最长字节</p><h2 id="2-5-字符型数据"><a href="#2-5-字符型数据" class="headerlink" title="2.5 字符型数据"></a><strong>2.5 字符型数据</strong></h2><h4 id="1-字符常量"><a href="#1-字符常量" class="headerlink" title="1.字符常量"></a>1.字符常量</h4><p>常规的字符常量，单引号，且只有一个字符</p><p>2.转义字符常量</p><p>2.1 ‘\n’ 回车换行enter</p><p>2.2 ‘\t’ 横向跳格tab键</p><p>2.3 ‘\b’ 退格 backspace</p><p>2.4 ‘\‘ 反杠</p><p>2.5 ‘&#39;‘ 单引号</p><p>2.6 ‘&quot;‘ 双引号</p><p>2.7 ‘\ddd’ 1至3位八进制整数表示的1个字符</p><p><strong>举例子：\101;\72;\2</strong></p><p>2.8 ‘\xhh’ 1至2位十六进制整数表示的1个字符</p><h5 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a><strong>补充知识点</strong></h5><p>%c   需要输出字符原形</p><p>%d   需要输出字符数值</p><p>%0  八进制</p><p>%x  十六进制</p><p>%f  输出的数值需要保留六位小数</p><h4 id="2-字符串常量"><a href="#2-字符串常量" class="headerlink" title="2.字符串常量"></a>2.字符串常量</h4><p>双引号-字符序列</p><p>其中字符 ‘A’ 占一个字节，字符串 “A” 占两个字节</p><p>注意：字符 ‘A’ 总是以 |0 结束，默认要占据一个字节</p><h4 id="3-字符变量"><a href="#3-字符变量" class="headerlink" title="3.字符变量"></a>3.字符变量</h4><p>char  为字符型</p><p>其中%c指的是字符原形，%d指的是字符数值</p><h5 id="字符之间的转换"><a href="#字符之间的转换" class="headerlink" title="字符之间的转换"></a>字符之间的转换</h5><p>1.大写字母+32&#x3D;小写字母</p><p>2.小写字母-32&#x3D;大写字母</p><p>3.数字 + ‘0’ &#x3D; 数字字符</p><p>4.数字字符 - ‘0’ &#x3D; 数字</p><p>例如 ‘9’ - ‘0’ &#x3D; 9</p><h2 id="2-6-算术表达式"><a href="#2-6-算术表达式" class="headerlink" title="2.6 算术表达式"></a>2.6 算术表达式</h2><h4 id="1-基本的算术运算符"><a href="#1-基本的算术运算符" class="headerlink" title="1.基本的算术运算符"></a>1.基本的算术运算符</h4><p>+、-、*、&#x2F;、%（求余）</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><h5 id="对于-求值要点"><a href="#对于-求值要点" class="headerlink" title="对于\求值要点"></a>对于\求值要点</h5><p>1.若a与b均为整型，结果为整型</p><p>2.若a与b其中任意一个为实型，结果为实型</p><h5 id="对于-求值要点-1"><a href="#对于-求值要点-1" class="headerlink" title="对于%求值要点"></a>对于%求值要点</h5><p>1.求余运算符的对象必须是整型</p><p><strong>2.出现负数，余数的符号与被除数一致</strong></p><h4 id="2-运算符的优先级与结合性"><a href="#2-运算符的优先级与结合性" class="headerlink" title="2.运算符的优先级与结合性"></a>2.运算符的优先级与结合性</h4><p>1.优先级：次序</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;入门阶段-认识C语言&quot;&gt;&lt;a href=&quot;#入门阶段-认识C语言&quot; class=&quot;headerlink&quot; title=&quot;入门阶段 认识C语言&quot;&gt;&lt;/a&gt;入门阶段 认识C语言&lt;/h1&gt;&lt;h2 id=&quot;1-进制的转换&quot;&gt;&lt;a href=&quot;#1-进制的转换&quot; class</summary>
      
    
    
    
    <category term="笔记" scheme="https://moe.vin/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="c语言" scheme="https://moe.vin/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
